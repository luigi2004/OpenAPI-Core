/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tech.opdev.json;

import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonValue;
import jakarta.json.stream.JsonLocation;
import jakarta.json.stream.JsonParser;

import lombok.extern.log4j.Log4j2;
import tech.opdev.json.Document.DocumentBuilder;

@Log4j2
public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        // System.out.println(new App().getGreeting());
        try (JsonParser parser = Json.createParser(App.class.getResourceAsStream("/api.json"))) {
            JsonLocation loc = parser.getLocation();
            log.info("Reading from line {}", loc.getLineNumber());
            parser.next();
            JsonObject object = parser.getObject();
            DocumentBuilder builder = Document.builder();
            object.forEach((header,val)->{
                log.info("Key: {}", header);
                switch (header) {
                    case "openapi":
                        builder.version(val.toString());
                        break;
                    case "info":{
                        builder.info(Info.from(val.asJsonObject()));
                        break;
                    }
                    case "servers":
                        val.asJsonArray().forEach(sVal->{
                            builder.server(Server.from(sVal.asJsonObject()));
                        });
                        break;
                    case "paths":
                        val.asJsonObject().forEach((k,v)->builder.path(k, PathItem.getFrom(v.asJsonObject())));
                        break;
                    case "externalDocs":
                        break;
                    default:
                        break;
                }
            });
            parser.close();
            log.info("Done!!! {}", builder.build());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
